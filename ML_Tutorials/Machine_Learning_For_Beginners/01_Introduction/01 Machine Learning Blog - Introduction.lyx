#LyX 2.4 created this file. For more info see https://www.lyx.org/
\lyxformat 620
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
\usepackage{bbm}
\usepackage{bbold} %does this have any problems with \bigtimes operator defined below?
%\usepackage{graphicx}
%\usepackage{background}
\usepackage{amsmath}

\allowdisplaybreaks %allows page breaks for multiline formula

\setlength{\parskip}{\medskipamount} %small, med or big
\setlength{\parindent}{0pt}

\usepackage{tcolorbox}
\tcbuselibrary{breakable}
\definecolor{backDef}{HTML}{8fb8e0}
\definecolor{titleDef}{HTML}{ffffff}
\definecolor{backCalc}{HTML}{E8F2F2}

\newcommand{\BIGOP}[1]{\mathop{\mathchoice%
{\raise-0.22em\hbox{\huge $#1$}}%
{\raise-0.05em\hbox{\Large $#1$}}{\hbox{\large $#1$}}{#1}}}


%New Stuff, different from usual preambles:
\usepackage{algorithm,algpseudocode}
\usepackage{xcolor}

\usepackage{lineno}
\definecolor{mypink1}{HTML}{8f194c}
\renewcommand{\linenumberfont}{\normalfont\sffamily\scriptsize\color{mypink1}}
\end_preamble
\use_default_options true
\begin_modules
tcolorbox
theorems-ams
figs-within-sections
theorems-sec
theorems-ams-extended
eqs-within-sections
\end_modules
\maintain_unincluded_children no
\language english
\language_package default
\inputencoding auto-legacy
\fontencoding auto
\font_roman "ae" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family rmdefault
\use_non_tex_fonts false
\font_sc false
\font_roman_osf false
\font_sans_osf false
\font_typewriter_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement H
\float_alignment class
\paperfontsize 12
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen true
\pdf_bookmarksopenlevel 3
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks false
\pdf_backref page
\pdf_pdfusetitle true
\pdf_quoted_options "pdfstartview={XYZ null null 1.25}"
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_formatted_ref 0
\use_minted 0
\use_lineno 0
\boxbgcolor #8fb8e0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 1cm
\rightmargin 2cm
\bottommargin 1.5cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tablestyle default
\listings_params "mathescape=true"
\tracking_changes false
\output_changes false
\change_bars false
\postpone_fragile_content false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\docbook_table_output 0
\docbook_mathml_prefix 1
\end_header

\begin_body

\begin_layout Standard
\begin_inset FormulaMacro
\renewcommand{\bigtimes}{\BIGOP{\times}}
{\boldsymbol{\times}}
\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\d}[1]{\frac{\textrm{d}}{\textrm{d}#1}}
{\frac{\textrm{d}}{\textrm{d}#1}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\pp}{\,\,.}
{\,\,.}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\kk}{\,\,,}
{\,\,,}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\image}{\textrm{Image}}
{\textrm{Image}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\r}{\textrm{Ran}}
{\textrm{Ran}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\k}{\textrm{Ker}}
{\textrm{Ker}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\tr}{\textrm{tr}}
{\textrm{tr}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\i}[4]{\int_{#1}^{#2}#3\textrm{d}#4}
{\int_{#1}^{#2}#3\textrm{d}#4}
\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\sgn}[1]{\textrm{sgn}\left(#1\right)}
{\textrm{sgn}\left(#1\right)}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\sym}[1]{\textrm{Sym}_{#1}}
{\textrm{Sym}_{#1}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\set}[2]{\left\{  #1\,:\,#2\right\}  }
{\left\{ #1\,:\,#2\right\} }
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\sc}[2]{\left\langle #1,\,#2\right\rangle _{\mathcal{K}_{\underline{\alpha}}}}
{\left\langle #1,\,#2\right\rangle _{\mathcal{K}_{\underline{\alpha}}}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\Sc}[2]{\left\langle #1,\,#2\right\rangle _{L_{\underline{\alpha}}^{2}}}
{\left\langle #1,\,#2\right\rangle _{L_{\underline{\alpha}}^{2}}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\no}[1]{\left\Vert #1\right\Vert _{\mathcal{K}_{\underline{\alpha}}}}
{\left\Vert #1\right\Vert _{\mathcal{K}_{\underline{\alpha}}}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\No}[1]{\left\Vert #1\right\Vert _{L_{\underline{\alpha}}^{2}}}
{\left\Vert #1\right\Vert _{L_{\underline{\alpha}}^{2}}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\K}{\mathcal{K}}
{\mathcal{K}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\hs}{\hspace{-1bp}}
{{\color{red}|}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\proofend}{\hfill\square}
{\hfill\square}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\ownname}[1]{\textsc{#1}}
{\textsc{#1}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\bskip}[1]{\vspace*{-\baselineskip}\,\vspace*{#1cm}}
{\updownarrow#1}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\VertOp}[3]{\!\!\!\begin{array}{c}
{\scriptstyle #3}\bskip{-0.1}\\
#1\bskip{-0.1}\\
{\scriptstyle #2}
\end{array}\!\!\!}
{#1_{#2}^{#3}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\sto}{\square}
{\square}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\ost}{\blacksquare}
{\blacksquare}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begingroup 
\backslash
hypersetup{linkcolor=black}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
endgroup
\end_layout

\end_inset


\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Quick Info
\end_layout

\begin_layout Description
Audience:
 This guide is made for beginners with basic knowledge in Python programming.
 
\begin_inset Note Note
status open

\begin_layout Plain Layout
who want a practical approach to get familiarized with the most important concepts in machine learning before consulting other more detailed guides or textbooks
\end_layout

\end_inset


\end_layout

\begin_layout Description
Goal:
 Introduction to this guide series.
\end_layout

\begin_layout Description
Resources:
 On my GitHub page you can download the whole guide as a PDF or find the links to all parts of this series.
\end_layout

\begin_deeper
\begin_layout Description
PDF:
 
\begin_inset CommandInset href
LatexCommand href
target "https://github.com/ynaghibi/BlogsResources/blob/main/Machine_Learning_Blog.pdf"
literal "false"

\end_inset


\end_layout

\begin_layout Description
All
\begin_inset space ~
\end_inset

Parts:
 
\begin_inset CommandInset href
LatexCommand href
target "https://github.com/ynaghibi/BlogsResources/blob/main/ML%20Guide%20Links"
literal "false"

\end_inset


\end_layout

\end_deeper
\begin_layout Description
Last
\begin_inset space ~
\end_inset

Edit:
 2025 April 03
\end_layout

\begin_layout Description
Credits:
 This guide is inspired by chapter 2 in "
\shape italic
Hands on Machine Learning
\shape default
" by Aur√©lien Geron 
\begin_inset CommandInset citation
LatexCommand cite
key "HoML"
literal "false"

\end_inset

.
 I am in no way associated with the author himself.
 This guide does not replicate any parts of the book,
 and the code presented here is based on publicly available source codes (see Colab).
 
\end_layout

\begin_layout Description
\begin_inset Note Note
status open

\begin_layout Plain Layout
First
\begin_inset space ~
\end_inset

published
\begin_inset space ~
\end_inset

on
\end_layout

\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
I want to use this introduction briefly to explain how to 
\shape italic
learn
\shape default
 the basics of machine learning,
 because it can be quite intimidating for newcomers with little background knowledge.
 Even without much knowledge about Python,
 you can learn language on the fly by following this guide,
 but if you want more preparations,
 then you should get familiar with the most basic concepts (
\series bold
variables,
 lists,
 tuples,
 dictionaries,
 functions,
 loops,
 if-else-statements
\series default
).
 You will also encounter other concepts like 
\series bold
lambda functions
\series default
 or 
\series bold
classes
\series default
,
 but our use cases are rather simple.
 
\end_layout

\begin_layout Standard
You will probably find out that learning Python modules for machine learning or data scientists almost feels like learning a new language,
 anyway.
 
\end_layout

\begin_layout Standard
For now you do not need much mathematical background except very simple 
\series bold
school mathematics
\series default
.
 Of course more advanced topics require more knowledge (like basic linear algebra or probability theory),
 but as long as you do not intend to build your own machine learning tools,
 you can simply use the existing ones without knowing every mathematical or technical detail working under the hood.
 
\end_layout

\begin_layout Standard
The best way to get a grasp on machine learning is to start with very practical books like "
\series bold
\shape italic
Hands on Machine Learning
\series default
\shape default
" by Aur√©lien Geron,
 because they explain working source codes for real world examples.
 The alternative would be starting from scratch with very basic books,
 but you may not have time to learn every detail right from the beginning.
\end_layout

\begin_layout Standard
Of course practical books can have a very steep learning curve,
 but if you use learning techniques like 
\series bold
priming
\series default
,
 
\series bold
incubation
\series default
,
 and the 
\series bold
24-hour rule
\series default
 combined with practical coding you can get started with machine learning within just a few days or weeks.
 This means that you do should not try to memorize everything from the beginning,
 but rather skim through the working examples,
 and revisit the details later on,
 while experimenting with parts of the code.
 The more you repeat the first-skim-then-revisit-cycle the better you will get without wasting too much time on less important details.
 
\begin_inset Note Note
status open

\begin_layout Plain Layout
More details:
 
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Here is a possible workflow during your learning process:
 Try to understand the meaning of a given code snippet,
 paste it in your own project,
 modify it to your needs,
 and after a while you will memorize the important components of the code much easier.
 If you ever reach the point,
 where you have no clue what the code means,
 then you probably need to revisit the previous parts.
 This is not easy,
 but it can be done.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
One way to soften the steep learning curve is to start with crash courses like this one.
 So without further ado,
 let us begin.
 
\end_layout

\begin_layout Section
Setup and installations
\end_layout

\begin_layout Standard
In order to run the Python code you only need a webbrowser,
 if you use Google's Colab Btw.
 Aur√©lien Geron's source code used in his book is also publicly available on Colab,
 even though it may not be very beginner friendly (see 
\begin_inset CommandInset citation
LatexCommand cite
key "Geron Colab"
literal "false"

\end_inset

).
 
\end_layout

\begin_layout Standard
However,
 I recommend running everything locally on your computer for the ease of use.
 We will be using Visual Code,
 which has a lot of nice comfort functions that are probably not available on Colab.
 The only downside is that the initial installation takes a bit of effort and about 10 GB space in total.
 
\end_layout

\begin_layout Subsubsection
Jupyter notebooks
\end_layout

\begin_layout Standard
First you can install Visual Code and the Jupyter extension.
 Jupyter allows you to run certain parts of your code in any order you like.
 We will refer to these code parts as 
\series bold
Jupyter cells
\series default
.
 
\end_layout

\begin_layout Standard
All you need to do is create a Python script file with the .py ending,
 and open it in Visual Code.
 Each cell is separated by 
\series bold
\size footnotesize
#%%
\series default
\size default
 at the beginning of each line.
 If you want to see how it works,
 you can experiment with the execution order of the cells in the code below.
 
\begin_inset Float algorithm
placement document
alignment document
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Formula $\phantom{}$
\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
vspace*{-
\backslash
baselineskip}
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code

\size footnotesize
#%%
\end_layout

\begin_layout LyX-Code

\size footnotesize
x = 3
\end_layout

\begin_layout LyX-Code

\size footnotesize
#%%
\end_layout

\begin_layout LyX-Code

\size footnotesize
print(x)
\end_layout

\begin_layout LyX-Code

\size footnotesize
#%%
\end_layout

\begin_layout LyX-Code

\size footnotesize
del x
\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Test
\end_layout

\end_inset


\end_layout

\end_inset

Once you run a Jupyter cell,
 an interactive window will open in Visual Code,
 which shows you the outputs like numbers,
 arrays,
 tables or even plots.
 
\end_layout

\begin_layout Standard
Note that the 
\series bold
interactive window
\series default
 may have a restart button,
 where all variables are reset,
 but this does not necessarily apply to module-level attributes like 
\series bold
\size footnotesize
__file__
\series default
\size default
.
 In this case you have to close the interactive window,
 before you can safely run the cells from a new script file.
 Otherwise some problems might occur,
 where e.g.
 
\series bold
\size footnotesize
__file__
\series default
\size default
 is the file directory of a previously executed python script instead of the current one.
 Even restarting Visual Code itself is not a substitute for starting a new interactive window.
\end_layout

\begin_layout Standard
The reason,
 why Jupyter cells are useful,
 is that you can debug or modify the code without repeating previously computed time intensive cells.
 Of course you should be careful with this functionality.
 Sometimes it is better to restart the whole code from scratch before causing too much chaos.
 
\end_layout

\begin_layout Subsection
Anaconda
\end_layout

\begin_layout Standard
After installing Jupyter,
 your Python setup also needs the core modules required for machine learning.
 Instead of downloading them separately,
 you can install 
\series bold
Anaconda
\series default
,
 which is widely used for data science,
 because it can handle module dependencies well.
 It should be also compatible with other Python based tasks that are not related to machine learning.
 
\end_layout

\begin_layout Standard
Since I will not guide you through the Anaconda installation,
 you can get the instructions elsewhere (e.g.
 
\begin_inset CommandInset href
LatexCommand href
target "https://github.com/ageron/handson-ml3/blob/main/INSTALL.md"
literal "false"

\end_inset

).
 
\end_layout

\begin_layout Standard
In Visual Code you should be able to able select the Python version in the bottom right bar in order to activate the 
\series bold
conda
\series default
-version of Python.
 If everything worked well,
 then the following test code will run without problems.
\begin_inset Float algorithm
placement document
alignment document
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Formula $\phantom{}$
\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
vspace*{-
\backslash
baselineskip}
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code

\size footnotesize
#%%
\end_layout

\begin_layout LyX-Code

\size footnotesize
import numpy as np
\end_layout

\begin_layout LyX-Code

\size footnotesize
import pandas as pd
\end_layout

\begin_layout LyX-Code

\size footnotesize
import matplotlib.pyplot as plt
\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Test
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
However,
 if there are some issues,
 you should remove other versions of Python on your computer,
 remove their environment variables from your system and user paths,
 and make sure that only the Anaconda paths are there (e.g.
 C:
\backslash
Users
\backslash
YourName
\backslash
anaconda3).
 Otherwise Visual Code may not recognize modules that have been already installed for Anaconda.
 Also make sure to close the current interactive window before starting a new one.
\end_layout

\begin_layout Standard
In case you ever need to install missing modules,
 you should use the Anaconda Prompt (not the Anaconda PowerShell Prompt or any other command prompt).
 In addition,
 it is recommended to use commands starting with "conda install" instead of "pip install".
 E.g.
 if you ever need a specialized module like 
\series bold
\size footnotesize
xgboost
\series default
\size default
,
 then you can install it with 
\begin_inset Float algorithm
placement document
alignment document
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Formula $\phantom{}$
\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
vspace*{-
\backslash
baselineskip}
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code

\size footnotesize
conda install -c conda-forge xgboost 
\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Anaconda Prompt
\end_layout

\end_inset


\end_layout

\end_inset

 In the command prompt you may also have to confirm the installation by entering 
\series bold
\size footnotesize
"y"
\series default
\size default
.
\end_layout

\begin_layout Section
Kaggle competitions
\end_layout

\begin_layout Standard
One way to practice machine learning is to participate in Kaggle competitions.
 We will demonstrate this with a competition for beginners:
 
\begin_inset CommandInset href
LatexCommand href
name "House Prices - Advanced Regression Techniques"
target "https://www.kaggle.com/competitions/house-prices-advanced-regression-techniques/submissions"
literal "false"

\end_inset

.
 There you can download the required data,
 which in this case is a rather small zip file.
 
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "Kaggle Housing"
key "Kaggle Housing Competition"
literal "false"

\end_inset


\begin_inset CommandInset href
LatexCommand href
name "House Prices - Advanced Regression Techniques"
target "https://www.kaggle.com/competitions/house-prices-advanced-regression-techniques/submissions"
literal "false"

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "AnacondaInstall"
key "Install Anaconda"
literal "false"

\end_inset


\begin_inset CommandInset href
LatexCommand href
name "https://github.com/ageron/handson-ml3/blob/main/INSTALL.md"
target "https://github.com/ageron/handson-ml3/blob/main/INSTALL.md"
literal "false"

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "GeronColab"
key "Geron Colab"
literal "false"

\end_inset


\begin_inset CommandInset href
LatexCommand href
target "https://colab.research.google.com/github/ageron/handson-ml3/blob/main/index.ipynb#scrollTo=-KAqK1NXk8Eu"
literal "false"

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "KagglData.py"
literal "false"

\end_inset


\begin_inset CommandInset href
LatexCommand href
target "https://github.com/ynaghibi/BlogsResources/blob/main/KagglDataC1.py"
literal "false"

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "HoML"
key "HoML"
literal "false"

\end_inset

Aur√©lien G√©ron (2019).
 
\shape italic
Hands-On Machine Learning with Scikit-Learn,
 Keras,
 and Tensorflow:
 Concepts,
 Tools,
 and Techniques to Build Intelligent Systems
\shape default
.
 O'Reilly Media
\end_layout

\end_body
\end_document
