Welcome!

In this repository each subfolder represents a blog-category. Each category can have subfolders for generating a specific blog or a series of blogs.

The Python script CreateIndexFiles.py is used to create index.html files that are necessary to generate hosted websites for the blogs on GitHub.
The way it works is that in each (sub)folder the first occuring xhtml-file is found as long as it is not called index.html.
The underlying assumption is that the xhtml-files in each folder has been created by LyX.
Then the content of the xhtml-files is changed as follows:
	- change the CSS style to make the appearance of the websites generated by the index.html more appealing (dark mode, etc.)
	- remove certain occurences like
	
		<math xmlns='http://www.w3.org/1998/Math/MathML'>
		</math>
		
		that for some reason are automatically added by LyX, whenever there is an algorithm floating box, which would create an unnecssary empty line in the website
	- the original xhtml-files are not changed by the script, only existing index.html files are overwritten to update them properly

The CreateIndexFiles.py script should be run from the root-folder that contains all subfolders. In this way all html-files are converted.
It does not matter if there are any other files than index.html are contained in each folder, because they will be usually ignored, when the websites on GitHub are created.
The only exception are e.g. images that are referenced by the xhtml-files generated by LyX. 
You may also have folders without any xhtml-files at all.

Once the local file repository is pushed on GitHub, it will take a while before the websites are generated.
In order to intially create such a repository, we need to enter a few commands in the Git Bash command prompt, assuming you opened it in the root folder on your computer. 
In my case the root folder is called "AllBlogs", but this name will not be replicated on GitHub. Instead the names of the files and subfolders will be pushed on GitHub with the names they have locally on your computer.

If e.g. your account name on GitHub is "username" and if the name of your repository is reposname, then you can "upload" the files in your root folder on GitHub with the following command:


git init
git add .
git commit -m "did some changes"
git branch -M main
git remote add origin https://github.com/username/reposname.git
git push -u origin main


When you are on your GitHub repository page, you can go to Settings -> Pages and then change the settings as follows:
	- Under Branch you choose main and then /(root)
	- then click the save button
After a while you should be able to access your hosted websites. The index.html file in your root folder will create a website with the following name (if you substitute username and reposname with your own names):

https://username.github.io/reposname/

You can also find this link, if you go to your repository on GitHub, then Settings (in the menu), and then Pages (option on the left bar). If your page is not displayed, then you can go to your repository and see the progress status there on the top. Usually it takes a few minutes.

Of course you also want to access the links to the hosted websites generated by the index.html files in your subfolders. 
E.g. assume that your rootfolder has a subfolder called Test1, and assume there is a index.html (in my case this would be .../AllBlogs/Test1/index.html), then you can reach the corresponding site on

https://username.github.io/reposname//Test1

If there are any whitespaces in your folder name, then you have to replace them with %20. Let's say you have a subfolder called "Some New Blog" in our root folder. Then its website would be

https://username.github.io/reposname//Some%20New%20Blog

Last, but not least we may want to update the hosted websites, if we changed any index.html files or any other files referenced by them. This can be done with the following commands (again assuming that you opened the Git Bash command prompt in your root folder):


git add .                      # stages all files or subfolders
git commit -m "Added images"   # commits changes
git push origin main           # uploads to GitHub


The dot in 
git add .
will add all files to the queue before commiting their updated version on GitHub. You can also add single files instead like e.g.


git add TestPart1/MyImage.png


I always recommend changing files on your local computer and then pushing it on GitHub, instead of changing files on GitHub directly. Otherwise you may get problems pushing future changes. In those case you can force an overwrite by using


git push origin main --force


although this is not recommended, because overwriting files like this should be the last option. Another benefit of changing your files locally first is that you will have the latest versions on your own computer without having to worry that they may get lost on the web.

And this is the last line of our README for Dummies. I hope it did not insult your intelligence.